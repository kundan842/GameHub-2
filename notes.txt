implememnting react query and global statemanagement and react router in gamehub project
=>  npm i @tanstack/react-query@4.28
=>  npm i @tanstack/react-query-devtools@4.28
========================================================================
          fetcing generes  and plateforms using query client
  =>  useQuery({
        queryKey:['plateforms'],
        queryFn: () => apiClient.get<FetchResponse<Plateform>>('/plateforms/lists/parents')
                    .then(res => res.data),
        staleTime:24*60*60*1000, // 24h,
        // initialData:{results:[],}

    })

    => here we can pass initialData for static conetent so till the stale time 
    no call will be made to server and those data will be used
    ===================================================================================
    => shift+ctrl+p to open the command pallate 
    => from command pallet organize the import, build application
    => before removing any exported function ,get the refrence of exported function
================================================================================================================
implement infinite queries for game 
=> for infite query react query have useInfiniteQuery hook using it we can create create a "Load More" UI 
=> in query function , queryFn: ( {pageParam = 1 }) => apiClient.getAll({
    react query passes pageno so destructure it it as pageParam and initilize it to 1 
    so for first time first page data is loaded
=> rawg api supports data pagination , https://api.rawg.io/docs/#operation/games_list
=> other then data , error and isLoading supported by Rect useQuery, infinite query supports additional
function isFetchingNextPage, fetchNextPage, hasNextPage
=========================================================================================================
                                infinite scroling in game component
=>   npm install --save react-infinite-scroll-component
=> <InfiniteScroll
      dataLength={totalFetchedGames}
      hasMore={!!hasNextPage}
      next={() => fetchNextPage()}
      loader={<Spinner></Spinner>}
    >
=> doc: https://www.npmjs.com/package/react-infinite-scroll-component
    => here !! convert value to boolean value
  ===  ================================================================================================= 
                picking the right statemanagement
=> in app.tsx, the logic of managin stae is spraed all over the place, and there is prop drilling
like from app passoig onSearch method to navBar component , from navebar passign onSearch metod to Search component
=> so we can use centralize stae management using reducer and share the state using React context
=> but the drawback with using react contetxt is that if any value changees , which is being shared using contetxt
then all the component using, that context will re render
=> so to avoid the rerendering  need to use the State Management libreries
    1.Redux
    2.Mobx
    3.Recoil
    4.XState
    5.Zustand
=> so wil be using the Zustand to manage the client state
=> first create the Zustand store , which will store the GameQury obejct
=> and that gameQuery can be shared easily , without passoing Sto each compoemnt indivisually
=> so in compoenent no need to use the state hook just use the zustand to 
manage state

=> npm i zustand@4.3.7
=> so using zustand we centarlized the state mangement , data sharing and avoided props drilling
=> so all compoemnt get shared data from single zustand store
=> but these command cannot resused directly into other projects
=> so choose between data passing as props or using librery as zustand depends 
on project need , there is not one fit
=============================================================================================================================================
                    Setting up routing
=> npm i react-router-dom@6.10.0
=>  {isRouteErrorResponse(error) this diffrenciated between route error or application error
=> add   errorElement: <ErrorPage></ErrorPage> to root route element
